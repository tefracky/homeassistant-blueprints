blueprint:
  source_url: "https://raw.githubusercontent.com/tefracky-organization/homeassistant-blueprints/blueprints/automations/vacuum.yaml"
  name: Staubsauger-Zeitplan mit Benachrichtigungssteuerung
  description: >
    üßπ **Staubsauger-Zeitplan mit Benachrichtigungssteuerung**

    Diese Automation verwendet die [Scheduler-Komponente von nielsfaber](https://github.com/nielsfaber/scheduler-component),
    um Reinigungszeitpl√§ne f√ºr deinen Staubsauger zu verwalten. Statt automatisch zu starten, erh√§ltst du
    eine smarte Push-Benachrichtigung, mit der du selbst entscheiden kannst, wann die Reinigung beginnt.


    üìÖ **Zeitplan & Modus:**

    - Die Reinigungszeiten werden √ºber Zeitpl√§ne in der `scheduler-card` festgelegt.
    - Der gew√ºnschte Reinigungsmodus (`quiet`, `balanced`, `turbo`, `max`) wird direkt aus dem Namen des Buttons abgeleitet.


    üì≤ **Benachrichtigungssteuerung:**

    - Wenn ein Zeitplan ausgel√∂st wird, erh√§ltst du eine Push-Nachricht mit den Optionen:
      - ‚úÖ **Start** ‚Äì startet den Staubsauger mit dem gew√ºnschten Modus
      - ‚ùå **Abbrechen (Dock)** ‚Äì bricht den Vorgang ab
    - W√§hrend der Reinigung kannst du:
      - ‚è∏ **Pausieren**
      - üõë **Stoppen**
      - üè† **Zur√ºck zur Ladestation schicken**
    - Statusmeldungen erscheinen automatisch, z.‚ÄØB. wenn der Sauger startet, pausiert oder zur√ºckkehrt.


    üõ† **Voraussetzungen:**

    - [Scheduler-Integration](https://github.com/nielsfaber/scheduler-component) (HACS)
    - [Scheduler-Card](https://github.com/nielsfaber/scheduler-card) (HACS - optional, aber empfohlen)
    - Zeitplan mit `input_button`, in dessen Name der Reinigungsmodus steckt (z.‚ÄØB. `input_button.vacuum_downstairs_start_turbo`)
    - Staubsauger mit Unterst√ºtzung f√ºr `fan_speed` (z.‚ÄØB. Roborock S7)


    üìå **Hinweis:**

    - Der Staubsauger wird niemals automatisch gestartet. Du entscheidest √ºber die Benachrichtigung, ob und wann die Reinigung beginnt.


    üîó **Credits:**

    - [Original-Blaupause](https://raw.githubusercontent.com/travipross/ha-blueprints/refs/heads/main/automations/scheduled-vacuum-with-notifications.yaml)

    - [Community-Diskussion](https://community.home-assistant.io/t/snoozable-vacuum-schedule-with-notification-control/822267)

  input:
    vacuum_entity_id:
      name: Die Entit√§t deines Staubsaugers
      description: Die Entit√§t deines Staubsaugers
      selector:
        entity:
          domain: vacuum
          integration: roborock
    trigger_button:
      name: Zeitplan-Trigger
      description: Die Button-Entit√§t deines Zeitplans, der vom Scheduler ausgel√∂st wird.
      selector:
        entity:
          domain: input_button
          multiple: true
    notify_tag:
      name: Benachrichtigungstag
      description: "Der Tag, der f√ºr Benachrichtigungen verwendet wird (z. B. 'roborock_unten' oder 'roborock_oben')."
      selector:
        text:

  domain: automation

mode: queued
max: 5

variables:
  vacuum_entity_id: !input vacuum_entity_id
  vacuum_friendly_name: "{{ state_attr(vacuum_entity_id, 'friendly_name') }}"
  trigger_button: !input trigger_button
  notify_tag: !input notify_tag
  suction_mode: >
    {% set result = state_attr(vacuum_entity_id, 'fan_speed') %}
    {% if trigger.entity_id is defined and "input_button.vacuum_" in trigger.entity_id %}
      {% set result = trigger.entity_id | regex_replace(find='^input_button\\.vacuum_[^_]+_start_', replace='') | string %}
    {% endif %}
    {{ result }}
  suction_mode_name: >
    {% set suction_mapping = {
      "off": "Aus",
      "quiet": "Leise",
      "balanced": "Ausgewogen",
      "turbo": "Turbo",
      "max": "Maximum",
      "custom": "Benutzerdefiniert"
    } %}
    {{ suction_mapping.get(suction_mode, "Ung√ºltig (" ~ suction_mode ~ ")") }}

triggers:
  - alias: "Scheduler: Zeitplan ausgel√∂st"
    trigger: state
    entity_id: !input trigger_button
    id: schedule_start

  - alias: "Benachrichtigungsaktion empfangen"
    trigger: event
    event_type: mobile_app_notification_action
    id: action

  - alias: "Staubsaugerstatus: an der Ladestation angedockt"
    trigger: state
    entity_id: !input vacuum_entity_id
    to: docked
    id: vacuum_docked

  - alias: "Staubsaugerstatus: Reinigung gestartet"
    trigger: state
    entity_id: !input vacuum_entity_id
    to: cleaning
    id: vacuum_started

  - alias: "Staubsaugerstatus: inaktiv"
    trigger: state
    entity_id: !input vacuum_entity_id
    to: idle
    id: vacuum_idle

  - alias: "Staubsaugerstatus: pausiert"
    trigger: state
    entity_id: !input vacuum_entity_id
    to: paused
    id: vacuum_paused

  - alias: "Staubsaugerstatus: kehrt zur Ladestation zur√ºck"
    trigger: state
    entity_id: !input vacuum_entity_id
    to: returning
    id: vacuum_returning

conditions: []

action:
  - choose:
      - conditions:
          - condition: trigger
            id: schedule_start
        sequence:
          - action: vacuum.set_fan_speed
            target:
              entity_id: "{{ vacuum_entity_id }}"
            data:
              fan_speed: "{{ suction_mode }}"
            alias: "Saugkraft setzen"
          - service: script.notification_send
            data:
              notify_title: "{{ vacuum_friendly_name }} einsatzbereit"
              notify_message: >
                Der Zeitplan wurde ausgel√∂st. Saugmodus: '{{ suction_mode_name }}'.
                Tippe auf 'Start', um zu beginnen, oder 'L√∂schen', um abzubrechen.
              notify_tag: "{{ notify_tag }}"
              notify_data:
                - high_priority
                - sticky
              send_car: false
              action_button_delete: "L√∂schen"
              additional_message_actions:
                - action: "{{ notify_tag + '_action_tag_separator_' + 'start' }}"
                  title: "Start"
            alias: "Benachrichtigung 'Bereit' senden"
      - conditions:
          - condition: trigger
            id: action
          - condition: template
            value_template: "{{ notify_tag in trigger.event.data.action }}"
        sequence:
          - variables:
              tag: "{{ trigger.event.data.action.split('_action_tag_separator_')[1] }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ tag == 'start' }}"
                sequence:
                  - service: vacuum.start
                    target:
                      entity_id: "{{ vacuum_entity_id }}"
                    alias: "Staubsauger starten"
              - conditions:
                  - condition: template
                    value_template: "{{ tag == 'dock' }}"
                sequence:
                  - service: vacuum.return_to_base
                    target:
                      entity_id: "{{ vacuum_entity_id }}"
                    alias: "Staubsauger zur Ladestation schicken"
              - conditions:
                  - condition: template
                    value_template: "{{ tag == 'pause' }}"
                sequence:
                  - service: vacuum.pause
                    target:
                      entity_id: "{{ vacuum_entity_id }}"
              - conditions:
                  - condition: template
                    value_template: "{{ tag == 'stop' }}"
                sequence:
                  - service: vacuum.stop
                    target:
                      entity_id: "{{ vacuum_entity_id }}"
      - conditions:
          - condition: trigger
            id: vacuum_started
        sequence:
          - service: script.notification_send
            data:
              notify_title: "{{ vacuum_friendly_name }} reinigt"
              notify_message: "Der Saugroboter reinigt jetzt im Modus '{{ suction_mode_name }}'."
              notify_tag: "{{ notify_tag }}"
              notify_data:
                - high_priority
                - sticky
              send_car: false
              action_button_delete: "L√∂schen"
              additional_message_actions:
                - action: "{{ notify_tag + '_action_tag_separator_' + 'pause' }}"
                  title: "Pause"
                - action: "{{ notify_tag + '_action_tag_separator_' + 'stop' }}"
                  title: "Stop"
                - action: "{{ notify_tag + '_action_tag_separator_' + 'dock' }}"
                  title: "Dock"
            alias: "Benachrichtigung 'Reinigung gestartet' senden"
      - conditions:
            - condition: trigger
              id: vacuum_paused
        sequence:
          - service: script.notification_send
            data:
              notify_title: "{{ vacuum_friendly_name }} pausiert"
              notify_message: "Der Saugroboter ist pausiert."
              notify_tag: "{{ notify_tag }}"
              notify_data:
                - high_priority
                - sticky
              send_car: false
              action_button_delete: "L√∂schen"
              additional_message_actions:
                - action: "{{ notify_tag + '_action_tag_separator_' + 'start' }}"
                  title: "Fortsetzen"
                - action: "{{ notify_tag + '_action_tag_separator_' + 'dock' }}"
                  title: "Dock"
            alias: "Benachrichtigung 'Pausiert (paused)' senden"
      - conditions:
            - condition: trigger
              id: vacuum_paused
        sequence:
          - service: script.notification_send
            data:
              notify_title: "{{ vacuum_friendly_name }} gestoppt"
              notify_message: "Der Saugroboter ist inaktiv."
              notify_tag: "{{ notify_tag }}"
              notify_data:
                - high_priority
                - sticky
              send_car: false
              action_button_delete: "L√∂schen"
              additional_message_actions:
                - action: "{{ notify_tag + '_action_tag_separator_' + 'start' }}"
                  title: "Start"
                - action: "{{ notify_tag + '_action_tag_separator_' + 'dock' }}"
                  title: "Dock"
            alias: "Benachrichtigung 'Gestoppt (idle)' senden"
      - conditions:
          - condition: trigger
            id: vacuum_returning
        sequence:
          - service: script.notification_send
            data:
              notify_title: "{{ vacuum_friendly_name }} kehrt zur Ladestation zur√ºck"
              notify_message: "Der Saugroboter ist auf dem R√ºckweg."
              notify_tag: "{{ notify_tag }}"
              notify_data:
                - high_priority
                - sticky
              send_car: false
              action_button_delete: "L√∂schen"
              additional_message_actions:
                - action: "{{ notify_tag + '_action_tag_separator_' + 'pause' }}"
                  title: "Pause"
            alias: "Benachrichtigung 'R√ºckkehr' senden"
  - choose:
      - conditions:
          - condition: trigger
            id: vacuum_docked
        sequence:
          - service: script.notification_delete
            data:
              notify_tag: "{{ notify_tag }}"
            alias: "Benachrichtigung l√∂schen"
